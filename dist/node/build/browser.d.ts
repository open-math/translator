import esbuild from "esbuild";
export default function buildForBrowser(): Promise<[esbuild.BuildResult<{
    entryPoints: string[];
    outfile: string;
    bundle?: boolean;
    splitting?: boolean;
    preserveSymlinks?: boolean;
    metafile?: boolean;
    outdir?: string;
    outbase?: string;
    external?: string[];
    packages?: "external";
    alias?: Record<string, string>;
    loader?: {
        [ext: string]: esbuild.Loader;
    };
    resolveExtensions?: string[];
    mainFields?: string[];
    conditions?: string[];
    write?: boolean;
    allowOverwrite?: boolean;
    tsconfig?: string;
    outExtension?: {
        [ext: string]: string;
    };
    publicPath?: string;
    entryNames?: string;
    chunkNames?: string;
    assetNames?: string;
    inject?: string[];
    banner?: {
        [type: string]: string;
    };
    footer?: {
        [type: string]: string;
    };
    stdin?: esbuild.StdinOptions;
    plugins?: esbuild.Plugin[];
    absWorkingDir?: string;
    nodePaths?: string[];
    sourcemap?: boolean | "linked" | "inline" | "external" | "both";
    legalComments?: "linked" | "inline" | "external" | "none" | "eof";
    sourceRoot?: string;
    sourcesContent?: boolean;
    format?: esbuild.Format;
    globalName?: string;
    target?: string | string[];
    supported?: Record<string, boolean>;
    platform?: esbuild.Platform;
    mangleProps?: RegExp;
    reserveProps?: RegExp;
    mangleQuoted?: boolean;
    mangleCache?: Record<string, string | false>;
    drop?: esbuild.Drop[];
    dropLabels?: string[];
    minify?: boolean;
    minifyWhitespace?: boolean;
    minifyIdentifiers?: boolean;
    minifySyntax?: boolean;
    lineLimit?: number;
    charset?: esbuild.Charset;
    treeShaking?: boolean;
    ignoreAnnotations?: boolean;
    jsx?: "transform" | "preserve" | "automatic";
    jsxFactory?: string;
    jsxFragment?: string;
    jsxImportSource?: string;
    jsxDev?: boolean;
    jsxSideEffects?: boolean;
    define?: {
        [key: string]: string;
    };
    pure?: string[];
    keepNames?: boolean;
    color?: boolean;
    logLevel?: esbuild.LogLevel;
    logLimit?: number;
    logOverride?: Record<string, esbuild.LogLevel>;
    tsconfigRaw?: string | esbuild.TsconfigRaw;
}>, esbuild.BuildResult<{
    entryPoints: string[];
    outfile: string;
    bundle?: boolean;
    splitting?: boolean;
    preserveSymlinks?: boolean;
    metafile?: boolean;
    outdir?: string;
    outbase?: string;
    external?: string[];
    packages?: "external";
    alias?: Record<string, string>;
    loader?: {
        [ext: string]: esbuild.Loader;
    };
    resolveExtensions?: string[];
    mainFields?: string[];
    conditions?: string[];
    write?: boolean;
    allowOverwrite?: boolean;
    tsconfig?: string;
    outExtension?: {
        [ext: string]: string;
    };
    publicPath?: string;
    entryNames?: string;
    chunkNames?: string;
    assetNames?: string;
    inject?: string[];
    banner?: {
        [type: string]: string;
    };
    footer?: {
        [type: string]: string;
    };
    stdin?: esbuild.StdinOptions;
    plugins?: esbuild.Plugin[];
    absWorkingDir?: string;
    nodePaths?: string[];
    sourcemap?: boolean | "linked" | "inline" | "external" | "both";
    legalComments?: "linked" | "inline" | "external" | "none" | "eof";
    sourceRoot?: string;
    sourcesContent?: boolean;
    format?: esbuild.Format;
    globalName?: string;
    target?: string | string[];
    supported?: Record<string, boolean>;
    platform?: esbuild.Platform;
    mangleProps?: RegExp;
    reserveProps?: RegExp;
    mangleQuoted?: boolean;
    mangleCache?: Record<string, string | false>;
    drop?: esbuild.Drop[];
    dropLabels?: string[];
    minify?: boolean;
    minifyWhitespace?: boolean;
    minifyIdentifiers?: boolean;
    minifySyntax?: boolean;
    lineLimit?: number;
    charset?: esbuild.Charset;
    treeShaking?: boolean;
    ignoreAnnotations?: boolean;
    jsx?: "transform" | "preserve" | "automatic";
    jsxFactory?: string;
    jsxFragment?: string;
    jsxImportSource?: string;
    jsxDev?: boolean;
    jsxSideEffects?: boolean;
    define?: {
        [key: string]: string;
    };
    pure?: string[];
    keepNames?: boolean;
    color?: boolean;
    logLevel?: esbuild.LogLevel;
    logLimit?: number;
    logOverride?: Record<string, esbuild.LogLevel>;
    tsconfigRaw?: string | esbuild.TsconfigRaw;
}>]>;
