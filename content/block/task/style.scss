@use 'def/size';
@use 'def/bp';
@use 'include/util';

[data-content]
{
    .taskHolder > .similarTasks > .inner
    {
        position: relative;
        display: flex;
        flex-direction: column;
        gap: size.$gapStruct;
        padding-top: size.$gapStruct;
    }

    .taskHolder .task:not([data-similar-open]) + .similarTasks
    {
        height: 0;
        overflow: hidden;
    }

    .taskHolder .task
    {
        border: 1px solid var(--c_border);
        border-left: none;
        border-right: none;

        padding-bottom: size.$gap;

        > header
        {
            display: flex;
            align-items: center;
            gap: size.$gap;

            border-bottom: 1px solid var(--c_border);
            padding: size.$gap 0;

            > .analogIcon
            {
                font-size: 30px;
                color: var(--c_text-muted);
            }

            > .info
            {
                flex: 1;
                display: flex;
                flex-direction: column;
                justify-content: center;

                > .title
                {
                    text-align: left;
                    font-weight: bold;
                    font-size: 100%;
                }

                > .desc
                {
                    font-size: .85em;
                    color: var(--c_text-muted);
                }

                > .tags
                {
                    font-size: .85em;
                    color: var(--c_text-muted);

                    display: flex;
                    flex-wrap: wrap;
                    gap: size.$gapSmall;

                    > .tag:not(:last-of-type)::after
                    {
                        content: ",";
                    }

                    @include bp.max(mini)
                    {
                        justify-content: center;
                    }
                }
            }

            > .controls
            {
                display: flex;
                gap: size.$gap;

                > button
                {
                    @include util.flexCC;
                    @include util.size(40px);

                    font-size: 17px;
                    color: var(--c_text-muted);
                    background: var(--c_bg);
                    border: 2px solid transparent;
                    border-radius: size.$borderRadius;
                    cursor: pointer;

                    @include util.transition(color, background, border-color);

                    &:hover
                    {
                        color: var(--c_text);
                        border-color: var(--c_text-disabled);
                    }
                }
            }

            @include bp.max(mini)
            {
                flex-direction: column;

                > .info
                {
                    text-align: center;
                }
            }
        }

        > .statement
        {
            padding-top: size.$gap;
        }

        > section
        {
            overflow: hidden;
        }

        > section > .inner
        {
            > header
            {
                display: flex;
                align-items: center;
                gap: size.$gapSmall;

                color: var(--c_text-muted);
                font-weight: bold;

                padding: size.$gap 0;

                > i
                {
                    font-size: 18px;
                    width: 18px;
                    text-align: center;
                }
            }
        }

        > .statement,
        > section
        {
            @include util.transition(filter);
        }

        > .statement,
        > section > .inner > .content
        {
            > *:not(:last-child) { margin-bottom: size.$gapBig; }
            > h3
            {
                color: var(--c_text-muted);
            }
        }

        $sections: (hint: '\e908', solution: '\e90a', answer: '\e909', similar: '\e90c', note: '\e90e');

        @each $sectionName, $sectionIcon in $sections
        {
            > header > .controls > button[data-section=#{$sectionName}] > i::before,
            > section[data-name=#{$sectionName}] > .inner > header > i::before
            {
                font-family: "OMath-Content-Icons";
                font-style: normal;
                content: $sectionIcon;
            }

            &[data-#{$sectionName}-open]
            {
                > header > .controls > button[data-section=#{$sectionName}]
                {
                    border-color: var(--c_text-dimmed);
                }
            }

            &:not([data-#{$sectionName}-open])
            {
                > section[data-name=#{$sectionName}]
                {
                    height: 0;
                    position: relative;
                    overflow: hidden;
                }
            }
        }
    }

    .taskHolder .task.genTask[data-generating]
    {
        > .statement,
        > section
        {
            filter: blur(10px);
        }

        > header button.generate
        {
            border-color: var(--c_text-dimmed);
            > i { animation: genAnim 1s linear infinite; }
        }

        @keyframes genAnim
        {
            from    { transform: rotate(0deg); }
            to      { transform: rotate(360deg); }
        }
    }
}